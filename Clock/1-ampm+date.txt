VIRTUAL DIGITAL CLOCK : AM/PM and Date

OFFSETS:

Our clock is required to have an AM/PM mode and a date mode, which can
be set from the command line and changed via the buttons (when we get
the buttons working).

In order to test these modes, we will need to give offsets to the
clock, so instead of running at the current time it runs at some other
time.  (That way we don't have to wait until midnight to see if the
date changes.)

If we run './clock -o 3600', it should be 3600 seconds (one hour)
ahead of the current time.  If we run './clock -o -7200', it should be
7200 seconds (two hours) behind the current time.

Remember that Unix time is a number of seconds, so implementing this
is pretty easy: we just get the current time and add the offset.  (The
model has get/set functions for the offset.)

The folder includes a Python script, 'stm.py', which returns the number
of seconds to midnight, or to noon, depending on flags,  This makes it
easy to test your clock: instead of you figuring out how many seconds
to midnight, you can have the script do it.

       ./clock -o $( ./stm.py -o -3 )

should show '23:59:57', and then it will count over to 00:00:00 over
the next three seconds.

To test am/pm mode, you'd do:

       ./clock -ao $( ./stm.py -no -3 )

which should show '11:59:57 am', and you can watch it count over
to '12:00:00 pm'.


The time object that the view gets is a 'struct tm'; you can see the
details by consulting the manual for localtime(3).  (That is, run
'man 3 localtime'.)  What's inside the 'tm' object is:

           struct tm {
               int tm_sec;    /* Seconds (0-60) */
               int tm_min;    /* Minutes (0-59) */
               int tm_hour;   /* Hours (0-23) */
               int tm_mday;   /* Day of the month (1-31) */
               int tm_mon;    /* Month (0-11) */
               int tm_year;   /* Year - 1900 */
               int tm_wday;   /* Day of the week (0-6, Sunday = 0) */
               int tm_yday;   /* Day in the year (0-365, 1 Jan = 0) */
               int tm_isdst;  /* Daylight saving time */
           };

Because you get a pointer, not the actual object, you use the
arrow syntax instead of the dot syntax.  For example, to get the
current hour, you look at: 'dateinfo->tm_hour' (without the quotes).
If you're in date mode, note that the month and year are not the
numbers as you expect.


What You Should Do Before You Start:

1) Figure out am/pm.  Midnight is '12:00:00 am'; do not set the hour
   to '00'.  At noon, it should go from '11:59:59 am' to '12:00:00 pm'.
   (This goes in the view.)


What Remains To Be Done To The Code:

2) Code your AM/PM logic and make sure it's right with the offset
   tests as mentioned above.

   Note that in 24-hour mode, one minute before 10am should look
   like this: '09:59:00', with a leading '0'.  But in AM/PM mode,
   it should look like this: ' 9:59:00 am', with a space, instead
   of a leading zero, on the hour.


3) Code up date logic.

   In date mode, Saint Patrick's Day should look like this:
   ' 3/17/2021 dt'

   The testing script is persnickity about formatting: 'am', 'pm',
   and 'dt' are lowercase, preceded by a single space.  Extraneous
   or missing spaces, or incorrect upper/lower case, will be
   rejected as incorrect.
